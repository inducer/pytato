name: CI
on:
    push:
        branches:
        - main
    pull_request:
    schedule:
        - cron:  '17 3 * * 0'

jobs:
    flake8:
        name: Flake8
        runs-on: ubuntu-latest
        steps:
        -   uses: actions/checkout@v2
        -
            uses: actions/setup-python@v1
            with:
                # matches compat target in setup.py
                python-version: '3.8'
        -   name: "Main Script"
            run: |
                curl -L -O -k https://gitlab.tiker.net/inducer/ci-support/raw/main/prepare-and-run-flake8.sh
                . ./prepare-and-run-flake8.sh "$(basename $GITHUB_REPOSITORY)" test examples

    pylint:
        name: Pylint
        runs-on: ubuntu-latest
        steps:
        -   uses: actions/checkout@v2
        -
            uses: actions/setup-python@v1
            with:
                python-version: '3.x'
        -   name: "Main Script"
            run: |
                sed -i "s/loopy.git/loopy.git@kernel_callables_v3-edit2/g" requirements.txt
                curl -L -O -k https://tiker.net/ci-support-v0
                . ci-support-v0
                build_py_project_in_conda_env
                run_pylint "$(basename $GITHUB_REPOSITORY)" test/test_*.py examples

    mypy:
        name: Mypy
        runs-on: ubuntu-latest
        steps:
        -   uses: actions/checkout@v2
        -
            uses: actions/setup-python@v1
            with:
                python-version: '3.x'
        -   name: "Main Script"
            run: |
                curl -L -O https://tiker.net/ci-support-v0
                . ./ci-support-v0
                build_py_project_in_conda_env
                python -m pip install mypy
                ./run-mypy.sh

    pytest:
        name: Conda Pytest
        runs-on: ubuntu-latest
        steps:
        -   uses: actions/checkout@v2
        -   name: "Main Script"
            run: |
                curl -L -O -k https://gitlab.tiker.net/inducer/ci-support/raw/main/build-and-test-py-project-within-miniconda.sh
                . ./build-and-test-py-project-within-miniconda.sh

    examples:
        name: Conda Examples
        runs-on: ubuntu-latest
        steps:
        -   uses: actions/checkout@v2
        -   name: "Main Script"
            run: |
                curl -L -O -k https://tiker.net/ci-support-v0
                . ci-support-v0
                build_py_project_in_conda_env
                run_examples

    docs:
        name: Documentation
        runs-on: ubuntu-latest
        steps:
        -   uses: actions/checkout@v2
        -
            uses: actions/setup-python@v1
            with:
                python-version: '3.x'
        -   name: "Main Script"
            run: |
                ./.ci-support/fix-code-for-docs.sh
                curl -L -O -k https://tiker.net/ci-support-v0
                . ci-support-v0
                build_py_project_in_conda_env
                build_docs

    downstream_tests:
        strategy:
            matrix:
                downstream_project: [meshmode, mirgecom]
        name: Tests for downstream project ${{ matrix.downstream_project }}
        runs-on: ubuntu-latest
        steps:
        -   uses: actions/checkout@v2
        -   name: "Main Script"
            env:
                DOWNSTREAM_PROJECT: ${{ matrix.downstream_project }}
            run: |
                if test "$DOWNSTREAM_PROJECT" = "mirgecom"; then
                    git clone "https://github.com/illinois-ceesd/$DOWNSTREAM_PROJECT.git"
                else
                    git clone "https://github.com/inducer/$DOWNSTREAM_PROJECT.git"
                fi

                cd "$DOWNSTREAM_PROJECT"
                echo "*** $DOWNSTREAM_PROJECT version: $(git rev-parse --short HEAD)"

                sed -i "/egg=arraycontext/ c git+file://$(readlink -f ..)#egg=arraycontext" requirements.txt

                # downstream projects might not be using PytatoArrayContext, force
                # pytato as a requirement so that using PytatoArrayContext in the
                # downstream package's tests doesn't result in a failure.
                if grep -q "pytato"  requirements.txt
                then
                    echo "$DOWNSTREAM_PROJECT already has pytato as a requiement";
                else
                    echo "git+https://github.com/inducer/pytato.git#egg=pytato" >> requirements.txt
                fi

                # Avoid slow or complicated tests in downstream projects
                export PYTEST_ADDOPTS="-k 'not (slowtest or octave or mpi)'"

                if test "$DOWNSTREAM_PROJECT" = "mirgecom"; then
                    # can't turn off MPI in mirgecom
                    sudo apt-get update
                    sudo apt-get install openmpi-bin libopenmpi-dev
                    export CONDA_ENVIRONMENT=conda-env.yml
                    export CISUPPORT_PARALLEL_PYTEST=no
                else
                    sed -i "/mpi4py/ d" requirements.txt
                fi

                curl -L -O https://tiker.net/ci-support-v0
                . ./ci-support-v0
                build_py_project_in_conda_env
                test_py_project

